import {DataProvider, fetchUtils} from "react-admin";
import {stringify} from "query-string";

function fetchJson(url: any, options: any) {
    options.user = {
        authenticated: true,
        token: localStorage.getItem('token')
    };
    console.log('options:'+JSON.stringify(options));
    return fetchUtils.fetchJson(url, options);
}

const apiUrl = '/api';

const resource_url = {
    {% for entity_name,entity in entities | items -%}
    {%- if not entity.properties -%}{%- continue -%}{%- endif -%}
    {{ entity.title | plural | snake_case }}: "{{ entity.title | plural | kebab_case }}"{%- if not loop.last -%},{% endif %}
    {% endfor %}
};


export const dataProvider: DataProvider = {
    getList: async (resource, params) => {
        const {page, perPage} = params.pagination;
        const {field, order} = params.sort;
        const query = {
            sort: `${field},${order}`,
            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
            filter: JSON.stringify(params.filter),
        };
        const url = `${apiUrl}/${resource}?${stringify(query)}`;


        const {json, headers} = await fetchJson(url, {signal: params.signal});
        const contentRange = headers.get('content-range');
        let return_data = {
            data: json,
            total: contentRange ? parseInt(contentRange.split('/').pop(), 10) : json.length,
        };
        return return_data;
    },

    getOne: (resource, params) =>
        fetchJson(`${apiUrl}/${resource}/${params.id}`,{}).then(({json}) => ({
            data: json,
        })),

    getMany: (resource, params) => {
        const query = {
            filter: JSON.stringify({id: params.ids}),
        };
        const url = `${apiUrl}/${resource}?${stringify(query)}`;
        return fetchJson(url,{}).then(({json}) => ({data: json}));
    },

    getManyReference: (resource, params) => {
        const {page, perPage} = params.pagination;
        const {field, order} = params.sort;
        const query = {
            sort: `${field},${order}`,
            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
            filter: JSON.stringify({
                ...params.filter,
                [params.target]: params.id,
            }),
        };
        const url = `${apiUrl}/${resource}?${stringify(query)}`;

        return fetchJson(url,{}).then(({headers, json}) => ({
            data: json,
            total: parseInt((headers.get('content-range') || "0").split('/').pop() || '0', 10),
        }));
    },

    update: (resource, params) =>
        fetchJson(`${apiUrl}/${resource}/${params.id}`, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        }).then(({json}) => ({data: json})),

    updateMany: (resource, params) => {
        const query = {
            filter: JSON.stringify({id: params.ids}),
        };
        return fetchJson(`${apiUrl}/${resource}?${stringify(query)}`, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        }).then(({json}) => ({data: json}));
    },

    create: (resource, params) =>
        fetchJson(`${apiUrl}/${resource}`, {
            method: 'POST',
            body: JSON.stringify(params.data),
        }).then(({json}) => ({
            data: {...params.data, id: json.id} as any,
        })),

    delete: (resource, params) =>
        fetchJson(`${apiUrl}/${resource}/${params.id}`, {
            method: 'DELETE',
        }).then(({json}) => ({data: json})),

    deleteMany: (resource, params) => {
        const query = {
            filter: JSON.stringify({id: params.ids}),
        };
        return fetchJson(`${apiUrl}/${resource}?${stringify(query)}`, {
            method: 'DELETE',
        }).then(({json}) => ({data: json}));
    }
};