{% import "macros.jinja" as macros %}
{% import "templates/sql_macros.jinja" as sql_macros %}
{% set schema_name = project_name | snake_case -%}

CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE SCHEMA IF NOT EXISTS {{ schema_name }};

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

{% for entity_name,entity in entities | items | sort(attribute="1.order")-%}

{% if entity.enum -%}
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '{{ entity_name | lower }}_enum') THEN
        CREATE TYPE _color_enum AS ENUM ({{ "'" ~ ( entity.enum | map('string') | join("', '") ) ~ "'" }});
    END IF;
END $$;
{% endif -%}

{% if entity.properties -%}

{% for prop_name, prop in entity.properties | items -%}
    {% if prop.enum -%}
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '{{prop_name | lower}}') THEN
        CREATE TYPE {{ prop_name | lower }} AS ENUM({{ "'" ~ ( prop.enum | map('string') | join("', '") ) ~ "'" }});
    END IF;
END $$;
    {% endif -%}
{% endfor -%}

{% set table_name = macros.get_table_name(entity_name) -%}
CREATE TABLE IF NOT EXISTS {{ schema_name }}.{{ table_name }}(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    {% for name, property in entity.properties | items | rejectattr("1.x-relationship","eq", "many-to-many") -%}
    {% set type = sql_macros.get_sql_type(name,property,name in entity.required) -%}
    {{name | snake_case}} {{ type }}{{ ',FOREIGN KEY( ' ~ name ~' ) REFERENCES ' ~ schema_name ~'.'~ macros.get_relation(property) | plural | snake_case ~ '(id)' if macros.relation_is_many_to_one(property)=='true' }}{{ ',' if not loop.last }}
    {% endfor -%}
);

CREATE TRIGGER set_updated_at BEFORE UPDATE ON {{ schema_name }}.{{ table_name }} FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

{% endif -%}
{% endfor -%}

{% set relations = macros.get_m2m_relations(entities) | trim -%}
{% if relations | split(',') | list | length > 0 -%}
{% for relation in relations  -%}
{% set left = relation | trim | split("_") | first  -%}
{% set right = relation | trim | split("_") | last -%}
CREATE TABLE IF NOT EXISTS {{ schema_name }}.{{ relation | trim }}(
    id SERIAL PRIMARY KEY,
    {{ left | snake_case }}_id INTEGER, FOREIGN KEY( {{ left }}_id ) REFERENCES {{ schema_name }}.{{ left | plural | snake_case }}(id),
    {{ right | snake_case }}_id INTEGER, FOREIGN KEY( {{ right }}_id ) REFERENCES {{ schema_name }}.{{ right | plural | snake_case }}(id)
);
{% endfor -%}
{% endif -%}