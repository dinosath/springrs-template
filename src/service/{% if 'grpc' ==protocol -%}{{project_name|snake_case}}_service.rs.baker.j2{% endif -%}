{% import "macros.jinja" as macros -%}
{% for entity_name,entity in entities | items -%}
{% if entity.properties | items %}
{% set message = entity_name | pascal_case -%}
{% set message_plural = entity_name | plural | pascal_case -%}
{% set message_snake = entity_name | snake_case -%}
{% set message_snake_plural = entity_name | plural | snake_case -%}
pub mod {{ message_snake }} {
    use tonic::{Request, Response, Status};
    use spring::{plugin::service::Service, tracing::{debug, error}};
    use {{ project_name | snake_case }}::{ {{ message }}, Create{{ message }}Request, Get{{ message }}Request, Update{{ message }}Request, Delete{{ message }}Request, List{{ message_plural }}Request, List{{ message_plural }}Response,};
    use {{ project_name | snake_case }}::{{ entity_name | snake_case }}_service_server::{ {{ message }}Service,{{ message }}ServiceServer };
    pub mod {{ project_name | snake_case }} {
        tonic::include_proto!("{{project_name| snake_case }}");
    }
    use crate::models::models::{{ message_snake }}::{ActiveModel, Entity, Model};
    use spring_sea_orm::DbConn;
    use sea_orm::{ActiveModelTrait, EntityTrait, IntoActiveModel, ModelTrait, Set};
    use crate::service::grpc_utils::{find_model_by_id, parse_uuid};

    #[derive(Clone, Service)]
    #[service(grpc = "{{message}}ServiceServer")]
    struct My{{ message }}Service {
        #[inject(component)]
        db: DbConn,
    }

    fn create_request_to_active_model(req: Create{{ message }}Request) -> ActiveModel {
        ActiveModel {
            {% for name, property in entity.properties | items -%}
            {% if macros.relation_is_many_to_many(property)=='true' or macros.relation_is_one_to_many(property)=='true' -%}{% continue %}{% endif -%}
            {{ name | snake_case }}: Set(req.{{ name | snake_case }}),
            {% endfor %}
            ..Default::default()
        }
    }

    fn update_request_to_active_model(req: Update{{ message }}Request) -> ActiveModel {
        ActiveModel {
            id: Set(parse_uuid(req.id.as_str()).unwrap()),
            {% for name, property in entity.properties | items -%}
            {% if macros.relation_is_many_to_many(property)=='true' or macros.relation_is_one_to_many(property)=='true' -%}{% continue %}{% endif -%}
            {{ name | snake_case }}: Set(req.{{ name | snake_case }}),
            {% endfor %}
            ..Default::default()
        }
    }

    fn entity_to_reply(item: Model) -> {{ message }} {
        {{ message }} {
            id: item.id.to_string(),
            {% for name, property in entity.properties | items -%}
            {% if macros.relation_is_many_to_many(property)=='true' or macros.relation_is_one_to_many(property)=='true' -%}{% continue %}{% endif -%}
            {{ name | snake_case }}: item.{{ name | snake_case }},
            {% endfor %}
            ..Default::default()
        }
    }

    #[tonic::async_trait]
    impl {{ message }}Service for My{{ message }}Service {
        async fn create(&self, request: Request<Create{{ message }}Request>) -> Result<Response<{{ message }}>, Status> {
            debug!("received create request: {:?}", request);
            let active_model = create_request_to_active_model(request.into_inner());
            let model = active_model.insert(&self.db).await.map_err(|e| Status::internal(e.to_string()))?;
            let reply = entity_to_reply(model);
            let response = Response::new(reply);
            debug!("responding with: {:?}", response);
            Ok(response)
        }

        async fn get(&self, request: Request<Get{{ message }}Request>) -> Result<Response<{{ message }}>, Status> {
            debug!("received get request: {:?}", request);
            let model = find_model_by_id::<Entity>(&self.db, request.into_inner().id.as_str()).await?;
            let reply = entity_to_reply(model);
            debug!("responding with: {:?}", reply);
            Ok(Response::new(reply))
        }

        async fn update(&self, request: Request<Update{{ message }}Request>, ) -> Result<Response<{{ message }}>, Status> {
            debug!("received update request: {:?}", request);
            let req = request.into_inner();
            let model = find_model_by_id::<Entity>(&self.db, req.id.as_str()).await?;
            let active_model = model.clone().into_active_model();
            let reply = entity_to_reply(model);
            let response = Response::new(reply);
            debug!("responding with: {:?}", response);
            Ok(response)
        }

        async fn delete(&self, request: Request<Delete{{ message }}Request>, ) -> Result<Response<()>, Status> {
            debug!("received delete request: {:?}", request);
            let model = find_model_by_id::<Entity>(&self.db, request.into_inner().id.as_str()).await?;
            model.delete(&self.db).await.map_err(|e| {
                error!("cannot perform deletion of entity {:?}", e);
                Status::internal(e.to_string())
            })?;
            let response = Response::new(());
            debug!("responding with: {:?}", response);
            Ok(response)
        }

        async fn list(&self, request: Request<List{{ message_plural }}Request>, ) -> Result<Response<List{{ message_plural }}Response>, Status> {
            debug!("received list request: {:?}", request);

            let models = Entity::find().all(&self.db).await.map_err(|e| {
                eprintln!("Database error: {}", e);
                Status::internal("Internal server error")
            })?
                .into_iter()
                .map(|item| entity_to_reply(item))
                .collect();
            let reply = List{{ message_plural }}Response {
                {{ message_plural | snake_case }}: models,
                next_page_token: String::new(),
            };
            let response = Response::new(reply);
            debug!("responding with: {:?}", response);
            Ok(response)
        }
    }

}
{% endif -%}
{% endfor -%}