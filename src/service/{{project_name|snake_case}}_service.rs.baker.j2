{% import "templates/macros.jinja" as macros -%}
{% for entity_name,entity in entities | items -%}
{% if entity.properties | items %}
{% set message = entity_name | pascal_case -%}
{% set message_plural = entity_name | plural | pascal_case -%}
{% set message_snake = entity_name | snake_case -%}
{% set message_snake_plural = entity_name | plural | snake_case -%}
pub mod {{ message }} {
    use tonic::{Request, Response, Status};
    use spring::plugin::service::Service;
    use {{ project_name | snake_case }}::{ {{ message }}, Create{{ message }}Request, Get{{ message }}Request, Update{{ message }}Request, Delete{{ message }}Request, List{{ message_plural }}Request, List{{ message_plural }}Response,};
    use {{ project_name | snake_case }}::{{ entity_name | snake_case }}_service_server::{ {{ message }}Service,{{ message }}ServiceServer };
    pub mod {{ project_name | snake_case }} {
        tonic::include_proto!("{{project_name| snake_case }}");
    }
    use crate::models::models::{{ message_snake }}::{ActiveModel, Entity, Model, Column};
    use spring_sea_orm::DbConn;
    use sea_orm::{ActiveModelTrait, Set};

    #[derive(Clone, Service)]
    #[service(grpc = "{{message}}ServiceServer")]
    struct My{{ message }}Service {
        #[inject(component)]
        db: DbConn,
    }

    #[tonic::async_trait]
    impl {{ message }}Service for My{{ message }}Service {
        async fn create_{{ message_snake }}(&self, request: Request<Create{{ message }}Request>, ) -> Result<Response<{{ message }}>, Status> {
            tracing::debug!("received Create{{ message }}Request: {:?}", request);
            let req = request.into_inner();
            let item = ActiveModel {
                {% for name, property in entity.properties | items -%}
                {% if macros.relation_is_many_to_many(property)=='true' or macros.relation_is_one_to_many(property)=='true' -%}{% continue %}{% endif -%}
                {{ name | snake_case }}: Set(req.{{ name | snake_case }}),
                {% endfor %}
                ..Default::default()
            };
            let item = item.insert(&self.db).await.map_err(|e| Status::internal(e.to_string()))?;

            let reply = {{ message }} {
                id: item.id.to_string(),
                {% for name, property in entity.properties | items -%}
                {% if macros.relation_is_many_to_many(property)=='true' or macros.relation_is_one_to_many(property)=='true' -%}{% continue %}{% endif -%}
                {{ name | snake_case }}: item.{{ name | snake_case }},
                {% endfor %}
                ..Default::default()
            };
            tracing::debug!("responding with: {:?}", reply);
            Ok(Response::new(reply))
        }

        async fn get_{{ message_snake }}(&self, request: Request<Get{{ message }}Request>, ) -> Result<Response<{{ message }}>, Status> {
            println!("Got a request from {:?}", request.remote_addr());

            let reply = {{ message }}::default();
            Ok(Response::new(reply))
        }

        async fn update_{{ message_snake }}(&self, request: Request<Update{{ message }}Request>, ) -> Result<Response<{{ message }}>, Status> {
            println!("Got a request from {:?}", request.remote_addr());

            let reply = {{ message }}::default();
            Ok(Response::new(reply))
        }

        async fn delete_{{ message_snake }}(&self, request: Request<Delete{{ message }}Request>, ) -> Result<Response<()>, Status> {
            println!("Got a request from {:?}", request.remote_addr());

            Ok(Response::new(()))
        }

        async fn list_{{ message_snake_plural }}(&self, request: Request<List{{ message_plural }}Request>, ) -> Result<Response<List{{ message_plural }}Response>, Status> {
            println!("Got a request from {:?}", request.remote_addr());

            let reply = List{{ message_plural }}Response {
                {{ message_plural | snake_case }}: vec![],
                next_page_token: String::new(),
            };
            Ok(Response::new(reply))
        }
    }

}
{% endif -%}
{% endfor -%}