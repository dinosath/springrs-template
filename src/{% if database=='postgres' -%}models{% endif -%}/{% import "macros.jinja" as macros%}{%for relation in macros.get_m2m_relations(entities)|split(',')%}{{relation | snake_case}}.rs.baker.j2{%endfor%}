{% if relation|trim=='' -%}{% continue -%}{% endif -%}
{% set left = relation | split("_") | first -%}
{% set right = relation | split("_") | last -%}
{% set file_name = relation | snake_case %}
use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(schema_name="{{ schema_name }}", table_name = "{{ file_name }}")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub {{ left | snake_case }}_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub {{ right | snake_case }}_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::{{ left | snake_case }}::Entity",
        from = "Column::{{ left | pascal_case }}Id",
        to = "super::{{ left | snake_case }}::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    {{ left | pascal_case }},
    #[sea_orm(
        belongs_to = "super::{{ right | snake_case }}::Entity",
        from = "Column::{{ right | pascal_case }}Id",
        to = "super::{{ right | snake_case }}::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    {{ right | pascal_case }},
}

impl Related<super::{{ left | snake_case }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ left | pascal_case }}.def()
    }
}

impl Related<super::{{ right | snake_case }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ right | pascal_case }}.def()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::{{ left | snake_case }}::Entity")]
    {{ left | pascal_case }},
    #[sea_orm(entity = "super::{{ right | snake_case }}::Entity")]
    {{ right | pascal_case }},
}

impl ActiveModelBehavior for ActiveModel {
}