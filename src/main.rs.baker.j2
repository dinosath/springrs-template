{{ 'use spring_grpc::GrpcPlugin;' if 'grpc' in features }}
{{ 'use spring::{auto_config, App};' if 'rest' in features else 'use spring::App;' }}
{% if 'sea-orm' in features -%}
use spring_sea_orm::{SeaOrmPlugin};
use plugin::SeaOrmMigrationPlugin;
{% endif -%}
{{ 'use spring_opentelemetry::{KeyValue, OpenTelemetryPlugin, ResourceConfigurator, SERVICE_NAME, SERVICE_VERSION, };' if 'open-telemetry' in features }}
{% if frontend_framework != 'none' or 'rest' in features -%}
use spring_web::{Router, WebConfigurator, WebPlugin};
{% endif -%}
{% if frontend_framework != 'none' %}
use vite_rs_axum_0_8::ViteServe;
use vite_rs::Embed;
{% endif -%}

mod service;
{% if 'sea-orm' in features -%}
mod models;
mod plugin;
{% endif -%}

#[derive(vite_rs::Embed)]
#[root = "frontend"]
struct Assets;

{{ '#[auto_config(WebConfigurator)]' if 'rest' in features -}}
#[tokio::main]
async fn main() {
    #[cfg(debug_assertions)]
    let _guard = Assets::start_dev_server(true);

    App::new()
        .opentelemetry_attrs([
            KeyValue::new(SERVICE_NAME, env!("CARGO_PKG_NAME")),
            KeyValue::new(SERVICE_VERSION, env!("CARGO_PKG_VERSION")),
        ])
        {% if 'sea-orm' in features -%}
        .add_plugin(SeaOrmPlugin)
        .add_plugin(SeaOrmMigrationPlugin)
        {% endif -%}
        .add_plugin(WebPlugin)
        {% if frontend_framework != 'none' %}
        .add_router(router())
        {% endif -%}
        {{ '.add_plugin(WebPlugin)' if 'rest' in features }}
        {{ '.add_plugin(OpenTelemetryPlugin)' if 'open-telemetry' in features }}
        {{ '.add_plugin(GrpcPlugin)' if 'grpc' in features }}
        .run().await
}

{% if frontend_framework != 'none' %}
fn router() -> Router {
    Router::new()
        .route_service("/", ViteServe::new(Assets::boxed()))
        .route_service("/{*path}", ViteServe::new(Assets::boxed()))
}
{% endif -%}